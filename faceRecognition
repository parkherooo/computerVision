import cv2
import numpy as np

def preprocessing(no):
    image = cv2.imread('images/face/%02d.jpg' % no, cv2.IMREAD_COLOR)
    if image is None: 
        return None, None
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    gray = cv2.equalizeHist(gray)
    return image, gray

face_cascade = cv2.CascadeClassifier("images/Haar_files/haarcascade_frontalface_alt2.xml")
eye_cascade = cv2.CascadeClassifier("images/Haar_files/haarcascade_eye.xml")
mouth_cascade = cv2.CascadeClassifier("images/Haar_files/haarcascade_mcs_mouth.xml")

choice = int(input("영상 파일(1) 또는 카메라(2) 선택: "))

if choice == 1:
    num = int(input("영상파일 선택(1~61): "))
    image, gray = preprocessing(num)
    if image is None: 
        raise Exception("영상파일 읽기 에러")
    
    faces = face_cascade.detectMultiScale(gray, 1.1, 5)
    for i in range(len(faces)):
        if len(faces) > 0:
            x, y, w, h = faces[i]
            face_image = image[y:y + 2*h//3, x:x + w]
            eyes = eye_cascade.detectMultiScale(face_image, 1.3, 5)
            face_image1 = image[(y + h)//2:y + h, x:x + w]
            mouth = mouth_cascade.detectMultiScale(face_image1, 1.3, 20)
            cv2.rectangle(image, (x, y), (x + w, y + h), (255, 0, 0), 2)
            
            if len(eyes) == 2:
                for ex, ey, ew, eh in eyes:
                    center = (x + ex + ew//2, y + ey + eh//2)
                    cv2.circle(image, center, 10, (0, 255, 0), 2)
            else:
                print("눈 미검출")
            
            if len(mouth) > 0:
                for ax, ay, aw, ah in mouth:
                    cv2.rectangle(face_image1, (ax, ay), (ax + aw, ay + ah), (0, 0, 255), 2)
            else:
                print("입 미검출")
        else:
            print("얼굴 미검출")
    
    cv2.imshow("image", image)
    cv2.waitKey()
elif choice == 2:
    cap = cv2.VideoCapture(0)
    while True:
        ret, frame = cap.read()
        if not ret:
            print("카메라 연결 실패")
            break
        
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        gray = cv2.equalizeHist(gray)
        faces = face_cascade.detectMultiScale(gray, 1.1, 5)
        for i in range(len(faces)):
            if len(faces) > 0:
                x, y, w, h = faces[i]
                cv2.rectangle(frame, (x, y), (x + w, y + h), (255, 0, 0), 2)
                face_frame = frame[y:y + 2*h // 3, x:x + w]
                eyes = eye_cascade.detectMultiScale(face_frame, 1.3, 5)
                face_frame1 = frame[(y + h) // 2:y + h, x:x + w]
                mouth = mouth_cascade.detectMultiScale(face_frame1, 1.3, 20)
                
                if len(eyes) == 2:
                    for ex, ey, ew, eh in eyes:
                        center = (x + ex + ew // 2, y + ey + eh // 2)
                        cv2.circle(frame, center, 10, (0, 255, 0), 2)
                else:
                    print("눈 미검출")
                
                if len(mouth) > 0:
                    for ax, ay, aw, ah in mouth:
                        cv2.rectangle(face_frame1, (ax, ay), (ax + aw, ay + ah), (0, 0, 255), 2)
                else:
                    print("입 미검출")
            else:
                print("얼굴 미검출")
        
        cv2.imshow("frame", frame)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()
